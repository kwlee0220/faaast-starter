plugins {
	id 'java'
	id 'eclipse'
	// id 'application'
	// id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'de.fraunhofer.iosb.ilt.faaast'
version = '1.0.0-1.0.0'
// mainClassName = 'de.fraunhofer.iosb.ilt.faaast.service.starter.App'


java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
//	options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

repositories {
	mavenCentral()
}
dependencies {
	implementation project(":utils")
	implementation project(':faaast-lib')
	implementation project(':mdt-client')
	
	implementation 'org.apache.logging.log4j:log4j-core:2.24.1'

	implementation "ch.qos.logback:logback-classic:${logback_version}"
	implementation "commons-io:commons-io:${commons_io_version}"

	implementation ("com.jayway.jsonpath:json-path:${jsonpath_version}") {
		exclude group: "net.minidev", module: "json-smart"
	}
	
	// AAS model
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-json:${aas4j_version}"

	implementation "info.picocli:picocli:${picocli_version}"
	implementation "net.minidev:json-smart:${minidev_version}"
	implementation "org.codehaus.janino:janino:${janino_version}"
}

// shadowJar {
// 	zip64 true
// 	mergeServiceFiles()
	
// 	exclude 'META-INF/*.SF'
// 	exclude 'META-INF/*.DSA'
// 	exclude 'META-INF/*.RSA'
// }

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
						def entry = values.first()
						if ( entry.kind == 'src' ) {
							entry.includes = []
							entry.excludes = []
						}
						int index = cp.entries.indexOf entry
						cp.entries.removeAll values
						cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}
